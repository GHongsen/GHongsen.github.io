<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h1 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h1><blockquote><p>欧几里得算法又称「辗转相除法」，是指用于计算两个 <strong>非负整数</strong> a，b的 <strong>最大公约数</strong> 应用领域有 <strong>数学</strong> 和 <strong>计算机</strong> 两个方面。  </p><p><strong>计算公式：</strong> gcd(a,b) &#x3D; gcd(b,a mod b)。</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F; todo</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p>&#x2F;&#x2F; todo</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="1984-学生分数的最小差值-简单"><a href="#1984-学生分数的最小差值-简单" class="headerlink" title="1984.学生分数的最小差值-简单"></a>1984.学生分数的最小差值-<font color=#5AB726>简单</font></h2><p>给你一个 <strong>下标从 0 开始</strong> 的整数数组 <code>nums</code> ，其中 <code>nums[i]</code> 表示第 <code>i</code> 名学生的分数。另给你一个整数 <code>k</code> 。</p><p>从数组中选出任意 <code>k</code> 名学生的分数，使这 <code>k</code> 个分数间 <strong>最高分</strong> 和 <strong>最低分</strong> 的 <strong>差值</strong> 达到 <strong>最小化</strong> 。</p><p>返回可能的 <strong>最小差值</strong> 。  <br></p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>nums = [90], k = 1  <b>输出：</b>0  <b>解释：</b>选出 1 名学生的分数，仅有 1 种方法：  - [<b>90</b>] 最高分和最低分之间的差值是 90 - 90 = 0  可能的最小差值是 0  </pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>nums = [9,4,1,7], k = 2<b>输出：</b>2<b>解释：</b>选出 2 名学生的分数，有 6 种方法：- [<b>9</b>,<b>4</b>,1,7] 最高分和最低分之间的差值是 9 - 4 = 5- [<b>9</b>,4,<b>1</b>,7] 最高分和最低分之间的差值是 9 - 1 = 8- [<b>9</b>,4,1,<b>7</b>] 最高分和最低分之间的差值是 9 - 7 = 2- [9,<b>4</b>,<b>1</b>,7] 最高分和最低分之间的差值是 4 - 1 = 3- [9,<b>4</b>,1,<b>7</b>] 最高分和最低分之间的差值是 7 - 4 = 3- [9,4,<b>1</b>,<b>7</b>] 最高分和最低分之间的差值是 7 - 1 = 6可能的最小差值是 2</pre><br><p><strong>提示：</strong></p><ul><li><code>1 &lt;= k &lt;= nums.length &lt;= 1000</code></li><li><code>0 <= nums[i] <= 10<sup>5</sup></code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">platesBetweenCandles</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">,</span> queries <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>n <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>sum <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>left <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>p <span class="token operator">:=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>sum<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token char">'|'</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> i<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> sum<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">&#125;</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">&#125;</span>right <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> p <span class="token operator">:=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'|'</span> <span class="token punctuation">&#123;</span>p <span class="token operator">=</span> i<span class="token punctuation">&#125;</span>right<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">&#125;</span>ans <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>queries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> q <span class="token operator">:=</span> <span class="token keyword">range</span> queries <span class="token punctuation">&#123;</span>l<span class="token punctuation">,</span> r <span class="token operator">:=</span> right<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">[</span>q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">if</span> l <span class="token operator">&lt;</span> r <span class="token punctuation">&#123;</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="2055-蜡烛之间的盘子-中等"><a href="#2055-蜡烛之间的盘子-中等" class="headerlink" title="2055. 蜡烛之间的盘子-中等"></a><a href="https://leetcode-cn.com/problems/plates-between-candles/">2055. 蜡烛之间的盘子</a>-<font color=#FFA119>中等</font></h2><p>给你一个长桌子，桌子上盘子和蜡烛排成一列。给你一个下标从 <strong>0</strong> 开始的字符串 <code>s</code> ，它只包含字符 <code>&#39;*&#39;</code> 和 <code>&#39;|&#39;</code> ，其中 <code>&#39;*&#39;</code> 表示一个 <strong>盘子</strong> ，<code>&#39;|&#39;</code> 表示一支 <strong>蜡烛</strong> 。</p><p>同时给你一个下标从 <strong>0</strong> 开始的二维整数数组 <code>queries</code> ，其中 <code>queries[i] = [left<sub>i</sub>, right<sub>i</sub>]</code> 表示 <strong>子字符串</strong> <code>s[left<sub>i</sub>...right<sub>i</sub>]</code> （<strong>包含左右端点的字符</strong>）。对于每个查询，你需要找到 <strong>子字符串中</strong> 在 <strong>两支蜡烛之间</strong> 的盘子的 <strong>数目</strong> 。如果一个盘子在 <strong>子字符串中</strong> 左边和右边 <strong>都</strong> 至少有一支蜡烛，那么这个盘子满足在 <strong>两支蜡烛之间</strong> 。</p><ul><li>比方说，<code>s = &quot;||**||**|*&quot;</code> ，查询 <code>[3, 8]</code> ，表示的是子字符串 <code>&quot;*||***\**\***|&quot;</code> 。子字符串中在两支蜡烛之间的盘子数目为 <code>2</code> ，子字符串中右边两个盘子在它们左边和右边 <strong>都</strong> 至少有一支蜡烛。</li></ul><p>请你返回一个整数数组 <code>answer</code> ，其中 <code>answer[i]</code> 是第 <code>i</code> 个查询的答案。<br><br></p><p><strong>示例 1：</strong></p><p><img src="/../resources/img/2055.%E8%9C%A1%E7%83%9B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%98%E5%AD%90-1.png"></p><pre><b>输入：</b>s = "**|**|***|", queries = [[2,5],[5,9]]<b>输出：</b>[2,3]<b>解释：</b>- queries[0] 有两个盘子在蜡烛之间。- queries[1] 有三个盘子在蜡烛之间。</pre><br><p><strong>示例 2：</strong></p><p><img src="/../resources/img/2055.%E8%9C%A1%E7%83%9B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%98%E5%AD%90-2.png"></p><pre><b>输入：</b>s = "***|**|*****|**||**|*", queries = [[1,17],[4,5],[14,17],[5,11],[15,16]]<b>输出：</b>[9,0,0,0,0]<b>解释：</b>- queries[0] 有 9 个盘子在蜡烛之间。- 另一个查询没有盘子在蜡烛之间。</pre><br><p><strong>提示：</strong></p><ul><li><code>3 <= s.length <= 10<sup>5</sup></code></li><li><code>s 只包含字符 &#39;*&#39; 和 &#39;|&#39; 。</code></li><li><code>1 <= queries.length <= 10<sup>5</sup></code></li><li><code>queries[i].length == 2</code></li><li><code>0 <= left<sub>i</sub> <= right<sub>i</sub> < s.length</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maximumDifference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 如果后面的数大，就求差值，并比较之前的差值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 如果小就替换</span>                min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="2016-增量元素之间的最大差值-简单"><a href="#2016-增量元素之间的最大差值-简单" class="headerlink" title="2016. 增量元素之间的最大差值-简单"></a><a href="https://leetcode-cn.com/problems/maximum-difference-between-increasing-elements/">2016. 增量元素之间的最大差值</a>-<font color=#5AB726>简单</font></h2><p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> ，该数组的大小为 <code>n</code> ，请你计算 <code>nums[j] - nums[i]</code> 能求得的 <strong>最大差值</strong> ，其中 <code>0 &lt;= i &lt; j &lt; n</code> 且 <code>nums[i] &lt; nums[j]</code> 。</p><p>返回 <strong>最大差值</strong> 。如果不存在满足要求的 <code>i</code> 和 <code>j</code> ，返回 <code>-1</code> 。  <br></p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>nums = [7,<b>1</b>,<b>5</b>,4]<b>输出：</b>4<b>解释：</b>最大差值出现在 i = 1 且 j = 2 时，nums[j] - nums[i] = 5 - 1 = 4 。注意，尽管 i = 1 且 j = 0 时 ，nums[j] - nums[i] = 7 - 1 = 6 &gt; 4 ，但 i &gt; j 不满足题面要求，所以 6 不是有效的答案。</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>nums = [9,4,3,2]<b>输出：</b>-1<b>解释：</b>不存在同时满足 i &lt; j 和 nums[i] &lt; nums[j] 这两个条件的 i, j 组合。</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>nums = [<b>1</b>,5,2,<b>10</b>]<b>输出：</b>9<b>解释：</b>最大差值出现在 i = 0 且 j = 3 时，nums[j] - nums[i] = 10 - 1 = 9 。</pre><br><p><strong>提示：</strong></p><ul><li><code>n == nums.length</code></li><li><code>2 &lt;= n &lt;= 1000</code></li><li><code>1 <= nums[i] <= 10<sup>9</sup></code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findCenter</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> edges<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> edges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> edges<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> edges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> edges<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> edges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> edges<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="1791-找出星型图的中心节点-简单"><a href="#1791-找出星型图的中心节点-简单" class="headerlink" title="1791.找出星型图的中心节点-简单"></a>1791.找出星型图的中心节点-<font color=#5AB726>简单</font></h2><p>有一个无向的 <strong>星型</strong> 图，由 <code>n</code> 个编号从 <code>1</code> 到 <code>n</code> 的节点组成。星型图有一个 <strong>中心</strong> 节点，并且恰有 <code>n - 1</code> 条边将中心节点与其他每个节点连接起来。</p><p>给你一个二维整数数组 <code>edges</code> ，其中 <code>edges[i] = [u<sub>i</sub>, v<sub>i</sub>]</code> 表示在节点 <code>u<sub>i</sub></code> 和 <code>v<sub>i</sub></code> 之间存在一条边。请你找出并返回 <code>edges</code> 所表示星型图的中心节点。<br></p><br><p><strong>示例 1：</strong></p><p><img src="/../resources/img/1791.%E6%89%BE%E5%87%BA%E6%98%9F%E5%9E%8B%E5%9B%BE%E7%9A%84%E4%B8%AD%E5%BF%83%E8%8A%82%E7%82%B9-1.png"></p><pre><b>输入：</b>edges = [[1,2],[2,3],[4,2]]<b>输出：</b>2<b>解释：</b>如上图所示，节点 2 与其他每个节点都相连，所以节点 2 是中心节点。 </pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>edges = [[1,2],[5,1],[1,3],[1,4]]<b>输出：</b>1</pre><br><p><strong>提示：</strong></p><ul><li><code>3 &lt;= n &lt;= 105</code></li><li><code>edges.length == n - 1</code></li><li><code>edges[i].length == 2</code></li><li><code>1 <= u<sub>i</sub>, v<sub>i</sub> <= n</code></li><li><code>u<sub>i</sub> != v<sub>i</sub></code></li><li>题目数据给出的 <code>edges</code> 表示一个有效的星型图</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>解题思路：</strong></p><p>​已知：题目中提到要求出数组中 <code>k</code> 个数的 <strong>最小差值</strong> ，求最小差值最好的办法是先将数组排好序，直接使用 <code>sort.Ints(</code> 对数组进行排序，然后根据 <code>k</code> 的大小来决定比较范围，循环比较，这种一般称为「<a href="../%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.md">滑动窗口</a>」，然后比较窗口内的最大最小差值，记录每组对比最后保留最小的差值返回；</p><p><strong>最终代码：</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">minimumDifference</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> k <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ans <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> math<span class="token punctuation">.</span>MaxInt32<span class="token comment">// 排序</span>sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token comment">// 将数组切片利用下标进行比较，滑动窗口无需循环整个数组</span><span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token operator">:=</span> <span class="token keyword">range</span> nums<span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token comment">// 切片后的数组，当前value是窗口最大值，下标对应的是窗口最小值</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>value<span class="token operator">-</span>nums<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> a <span class="token operator">></span> b <span class="token punctuation">&#123;</span><span class="token keyword">return</span> b<span class="token punctuation">&#125;</span><span class="token keyword">return</span> a<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>解题思路：</strong></p><p>​已知：题目中提到要求出数组中 <code>k</code> 个数的 <strong>最小差值</strong> ，求最小差值最好的办法是先将数组排好序，直接使用Java的工具类 <code>Arrays.sort()</code> 对数组进行排序，<code>Arrays.sort()</code> 使用的「<a href="../%E7%AE%97%E6%B3%95/%E5%8F%8C%E8%BD%B4%E5%BF%AB%E6%8E%92.md">双轴快排</a>」直接使用就好了，然后根据 <code>k</code> 的大小来决定比较范围，循环比较，这种一般称为「<a href="../%E7%AE%97%E6%B3%95/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3.md">滑动窗口</a>」，然后比较窗口内的最大最小差值，记录每组对比最后保留最小的差值返回；</p><p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimumDifference</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 排序</span>  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>  <span class="token comment">// 滑动窗口循环比较</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> min<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>解题思路：</strong></p><p>已知：</p><ul><li><p><code>2 &lt;= 分母 &lt;= n</code></p></li><li><p><code>1 &lt;= 分子 &lt;= 分母</code></p></li></ul><p>可以写出循环</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> denominator <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> denominator<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> numerator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numerator <span class="token operator">&lt;</span> denominator<span class="token punctuation">;</span> numerator<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑代码</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的只要求出当前分子分母组成的分数是否是 <strong>最简</strong> 分数（即判断两个数的最大公约数是否为1）；</p><p>利用递归实现 「<a href="../%E7%AE%97%E6%B3%95/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95.md">欧几里得算法</a>」 求出两数最大公约数是否为1；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> denominator<span class="token punctuation">,</span> <span class="token keyword">int</span> numerator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>numerator <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> denominator<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator <span class="token operator">%</span> numerator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">simplifiedFractions</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 循环所有分母小于n的分数</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> denominator <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> denominator <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> denominator<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> numerator <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numerator <span class="token operator">&lt;</span> denominator<span class="token punctuation">;</span> numerator<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果两个数最大公约数是1就将分数加入结果集</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gcd</span><span class="token punctuation">(</span>denominator<span class="token punctuation">,</span> numerator<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>numerator <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> denominator<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 欧几里得算法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> denominator<span class="token punctuation">,</span> <span class="token keyword">int</span> numerator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> numerator <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> denominator <span class="token operator">:</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator <span class="token operator">%</span> numerator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>解题思路：</strong></p><p>已知：</p><ul><li><p><code>2 &lt;= 分母 &lt;= n</code></p></li><li><p><code>1 &lt;= 分子 &lt;= 分母</code></p></li></ul><p>可以写出循环</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> denominator <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> denominator <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> denominator<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> numerator <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> numerator <span class="token operator">&lt;</span> denominator<span class="token punctuation">;</span> numerator<span class="token operator">++</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 逻辑代码</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>剩下的只要求出当前分子分母组成的分数是否是 <strong>最简</strong> 分数（即判断两个数的最大公约数是否为1）；</p><p>利用递归实现「<a href="../%E7%AE%97%E6%B3%95/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95.md">欧几里得算法</a>」 求出两数最大公约数是否为1；</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> a <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token operator">%</span>a<span class="token punctuation">,</span> a<span class="token punctuation">&#125;</span><span class="token keyword">return</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">func <span class="token function">simplifiedFractions</span><span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ans <span class="token punctuation">[</span><span class="token punctuation">]</span>string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 循环出所有分母小与n的分数</span><span class="token keyword">for</span> denominator <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> denominator <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> denominator<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> numerator <span class="token operator">:</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> numerator <span class="token operator">&lt;</span> denominator<span class="token punctuation">;</span> numerator<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token comment">// 如果最大公约数为1则加入结果集</span><span class="token keyword">if</span> <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>ans <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">fmt<span class="token punctuation">.</span></span>Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d/%d"</span><span class="token punctuation">,</span> numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// 欧几里得算法</span>func <span class="token function">gcd</span><span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">int</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> numerator <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>numerator<span class="token punctuation">,</span> denominator <span class="token operator">=</span> denominator<span class="token operator">%</span>numerator<span class="token punctuation">,</span> numerator<span class="token punctuation">&#125;</span><span class="token keyword">return</span> denominator<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="1447-最简分数-中等"><a href="#1447-最简分数-中等" class="headerlink" title="1447.最简分数-中等"></a>1447.最简分数-<font color=#FFA119>中等</font></h2><p>给你一个整数 <code>n</code> ，请你返回所有 0 到 1 之间（不包括 0 和 1）满足分母小于等于  <code>n</code> 的 <strong>最简</strong> 分数 。分数可以以 <strong>任意</strong> 顺序返回。<br><br></p><p><strong>示例 1：</strong></p><pre><b>输入：</b>n = 2  <b>输出：</b>["1/2"]  <b>解释：</b>"1/2" 是唯一一个分母小于等于 2 的最简分数。</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>n = 3  <b>输出：</b>["1/2","1/3","2/3"]  </pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>n = 4  <b>输出：</b>["1/2","1/3","1/4","2/3","3/4"]  <b>解释：</b>"2/4" 不是最简分数，因为它可以化简为 "1/2" 。 </pre><br><p><strong>示例 4：</strong></p><pre><b>输入：</b>n = 1  <b>输出：</b>[]</pre><br><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 100</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">maxNumberOfBalloons</span><span class="token punctuation">(</span>text <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>   letter <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ch <span class="token operator">:=</span> <span class="token keyword">range</span> text <span class="token punctuation">&#123;</span>      letter<span class="token punctuation">[</span>ch<span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span>   <span class="token punctuation">&#125;</span>   letter<span class="token punctuation">[</span><span class="token char">'l'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">2</span>   letter<span class="token punctuation">[</span><span class="token char">'o'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">2</span>   ans <span class="token operator">:=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>letter<span class="token punctuation">[</span><span class="token char">'b'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'a'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'l'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'o'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'n'</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">min</span><span class="token punctuation">(</span>a <span class="token builtin">int</span><span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> a <span class="token operator">&lt;</span> b <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> a   <span class="token punctuation">&#125;</span>   <span class="token keyword">return</span> b<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxNumberOfBalloons</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> letter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token char">'z'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">:</span> text<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    letter<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  letter<span class="token punctuation">[</span><span class="token char">'l'</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  letter<span class="token punctuation">[</span><span class="token char">'o'</span><span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>letter<span class="token punctuation">[</span><span class="token char">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'o'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> letter<span class="token punctuation">[</span><span class="token char">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="1189-“气球”的最大数量-简单"><a href="#1189-“气球”的最大数量-简单" class="headerlink" title="1189.“气球”的最大数量-简单"></a>1189.“气球”的最大数量-<font color=#5AB726>简单</font></h2><p>给你一个字符串 <code>text</code>，你需要使用 <code>text</code> 中的字母来拼凑尽可能多的单词 <strong>“balloon”（气球）</strong>。</p><p>字符串 <code>text</code> 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 **”balloon”**。  <br></p><br><p><strong>示例 1：</strong></p><p><img src="/../resources/img/1189.%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-1.jpeg"></p><pre><b>输入：</b>text = "nlaebolko"  <b>输出：</b>1  </pre><br><p><strong>示例 2：</strong></p><p><img src="/../resources/img/1189.%E2%80%9C%E6%B0%94%E7%90%83%E2%80%9D%E7%9A%84%E6%9C%80%E5%A4%A7%E6%95%B0%E9%87%8F-2.jpeg"></p><pre><b>输入：</b>text = "loonbalxballpoon"  <b>输出：</b>2  </pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>text = "leetcode"  <b>输出：</b>0  </pre><br><p><strong>提示：</strong></p><ul><li><code>1 <= text.length <= 10<sup>4</sup></code></li><li><code>text</code> 全部由小写英文字母组成</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">numEnclaves</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> mun <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 记录长宽</span>  <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token comment">// 第一行和最后一行的陆地</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 第一列和最后一列的陆地</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 计算没有靠边的陆地数量</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      mun<span class="token operator">+=</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> mun<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 扩散</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 验证当前坐标是否有效</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 沉没陆地为海洋，方便统计；同时也隔绝了已被记录的陆地被重复操作</span>    grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 向四方扩散</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 上</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 右</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="1020-飞地的数量-中等"><a href="#1020-飞地的数量-中等" class="headerlink" title="1020.飞地的数量-中等"></a>1020.飞地的数量-<font color=#FFA119>中等</font></h2><p>给你一个大小为 <code>m x n</code> 的二进制矩阵 <code>grid</code> ，其中 <code>0</code> 表示一个海洋单元格、<code>1</code> 表示一个陆地单元格。</p><p>一次 <strong>移动</strong> 是指从一个陆地单元格走到另一个相邻（<strong>上、下、左、右</strong>）的陆地单元格或跨过 <code>grid</code> 的边界。</p><p>返回网格中 <strong>无法</strong> 在任意次数的移动中离开网格边界的陆地单元格的数量。<br><br></p><p><strong>示例 1：</strong></p><p><img src="/../resources/img/1020.%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F-1.jpeg"></p><pre><b>输入：</b>grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]  <b>输出：</b>3  <b>解释：</b>有三个 1 被 0 包围。一个 1 没有被包围，因为它在边界上。  </pre><br><p><strong>示例 2：</strong></p><p><img src="/../resources/img/1020.%E9%A3%9E%E5%9C%B0%E7%9A%84%E6%95%B0%E9%87%8F-2.jpeg"></p><pre><b>输入：</b>grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]  <b>输出：</b>0  <b>解释：</b>所有 1 都在边界上或可以到达边界。  </pre><br><p><strong>提示：</strong></p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 500</code></li><li><code>grid[i][j]</code> 的值为 <code>0</code> 或 <code>1</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="1380-矩阵中的幸运数-简单"><a href="#1380-矩阵中的幸运数-简单" class="headerlink" title="1380.矩阵中的幸运数-简单"></a>1380.矩阵中的幸运数-<font color=#5AB726>简单</font></h2><p>给你一个 <code>m x n</code> 的矩阵，矩阵中的数字 <strong>各不相同</strong> 。请你按 <strong>任意</strong> 顺序返回矩阵中的所有幸运数。</p><p>幸运数是指矩阵中满足同时下列两个条件的元素：<br></p><ul><li>在同一行的所有元素中最小  </li><li>在同一列的所有元素中最大</li></ul><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>matrix = [[3,7,8],[9,11,13],[15,16,17]]  <b>输出：</b>[15]  <b>解释：</b>15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。  </pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]  <b>输出：</b>[12]  <b>解释：</b>12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。  </pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>matrix = [[7,8],[1,2]]  <b>输出：</b>[7]  </pre><br><p><strong>提示：</strong></p><ul><li><code>m == mat.length</code></li><li><code>n == mat[i].length</code></li><li><code>1 &lt;= n, m &lt;= 50</code></li><li><code>1 <= matrix[i][j] <= 10<sup>5</sup></code></li><li>矩阵中的所有元素都是不同的</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">luckyNumbers</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> luckyNumbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">:</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> colMinIndex <span class="token operator">=</span> <span class="token function">getMin</span><span class="token punctuation">(</span>ints<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>colMinIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">[</span>colMinIndex<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>col <span class="token operator">==</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>luckyNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>colMinIndex<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> luckyNumbers<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> min <span class="token operator">=</span> ints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ints<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>min <span class="token operator">=</span> ints<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>min<span class="token punctuation">,</span> index<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="838-推多米诺-中等"><a href="#838-推多米诺-中等" class="headerlink" title="838.推多米诺-中等"></a>838.推多米诺-<font color=#FFA119>中等</font></h2><p><code>n</code> 张多米诺骨牌排成一行，将每张多米诺骨牌垂直竖立。在开始时，同时把一些多米诺骨牌向左或向右推。</p><p>每过一秒，倒向左边的多米诺骨牌会推动其左侧相邻的多米诺骨牌。同样地，倒向右边的多米诺骨牌也会推动竖立在其右侧的相邻多米诺骨牌。</p><p>如果一张垂直竖立的多米诺骨牌的两侧同时有多米诺骨牌倒下时，由于受力平衡， 该骨牌仍然保持不变。</p><p>就这个问题而言，我们会认为一张正在倒下的多米诺骨牌不会对其它正在倒下或已经倒下的多米诺骨牌施加额外的力。<br></p><p>给你一个字符串 <code>dominoes</code> 表示这一行多米诺骨牌的初始状态，其中：</p><ul><li><p><code>dominoes[i] = &#39;L&#39;</code>，表示第 <code>i</code> 张多米诺骨牌被推向左侧，</p></li><li><p><code>dominoes[i] = &#39;R&#39;</code>，表示第 <code>i</code> 张多米诺骨牌被推向右侧，</p></li><li><p><code>dominoes[i] = &#39;.&#39;</code>，表示没有推动第 <code>i</code> 张多米诺骨牌。</p></li></ul><p>返回表示最终状态的字符串。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>dominoes = "RR.L"<b>输出：</b>"RR.L"<b>解释：</b>第一张多米诺骨牌没有给第二张施加额外的力。  </pre><br><p><strong>示例 2：</strong></p><p><img src="/../resources/img/838.%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA-1.png"></p><pre><b>输入：</b>dominoes = ".L.R...LR..L.."<b>输出：</b>"LL.RR.LLRRLL.."</pre><br><p><strong>提示：</strong></p><ul><li><code>n == dominoes.length</code></li><li><code>1 &lt;= n &lt;= 105</code></li><li><code>dominoes[i]</code> 为 <code>&#39;L&#39;</code>、<code>&#39;R&#39;</code> 或 <code>&#39;.&#39;</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pushDominoes</span><span class="token punctuation">(</span><span class="token class-name">String</span> dominoes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> dominoes<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">char</span> start <span class="token operator">=</span> <span class="token char">'L'</span><span class="token punctuation">;</span><span class="token keyword">char</span> end<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> endIndex <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment">// 连续的直立多米诺骨牌</span><span class="token keyword">while</span> <span class="token punctuation">(</span>endIndex <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'.'</span><span class="token punctuation">)</span> endIndex<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">// 如果 直立多米诺骨牌的最左侧跟前面相同 则中间的全部变为与两边一样</span>end <span class="token operator">=</span> endIndex <span class="token operator">>=</span> n <span class="token operator">?</span> <span class="token char">'R'</span> <span class="token operator">:</span> chars<span class="token punctuation">[</span>endIndex<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">==</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> start<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> <span class="token char">'R'</span> <span class="token operator">&amp;&amp;</span> end <span class="token operator">==</span> <span class="token char">'L'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> k <span class="token operator">=</span> endIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'R'</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>k<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'L'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>start <span class="token operator">=</span> end<span class="token punctuation">;</span>i <span class="token operator">=</span> endIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseOnlyLetters</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> chars<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="917-仅仅反转字母-简单"><a href="#917-仅仅反转字母-简单" class="headerlink" title="917.仅仅反转字母-简单"></a>917.仅仅反转字母-<font color=#5AB726>简单</font></h2><p>给你一个字符串 <code>s</code> ，根据下述规则反转字符串：</p><ul><li><p>所有非英文字母保留在原有位置。</p></li><li><p>所有英文字母（小写或大写）位置反转。</p></li></ul><p>返回反转后的 <code>s</code> 。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>s = "ab-cd"<b>输出：</b>"dc-ba" </pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>s = "a-bC-dEf-ghIj"<b>输出：</b>"j-Ih-gfE-dCba"</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>s = "Test1ng-Leet=code-Q!"<b>输出：</b>"Qedo1ct-eeLg=ntse-T!"</pre><br><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 100</code></li><li><code>s</code> 仅由 ASCII 值在范围 <code>[33, 122]</code> 的字符组成</li><li><code>s</code> 不含 <code>&#39;\&quot;&#39;</code> 或 <code>&#39;\\&#39;</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="969-煎饼排序-中等"><a href="#969-煎饼排序-中等" class="headerlink" title="969.煎饼排序-中等"></a>969.煎饼排序-<font color=#FFA119>中等</font></h2><p>给你一个整数数组 <code>arr</code> ，请使用 <strong>煎饼翻转</strong> 完成对数组的排序。</p><p>一次煎饼翻转的执行过程如下：</p><ul><li><p>选择一个整数 <code>k</code> ，<code>1 &lt;= k &lt;= arr.length</code></p></li><li><p>反转子数组 <code>arr[0...k-1]</code>（<strong>下标从 0 开始</strong>）</p></li></ul><p>例如，<code>arr = [3,2,1,4]</code> ，选择 <code>k = 3</code> 进行一次煎饼翻转，反转子数组 <code>[3,2,1]</code> ，得到 <code>arr = [<strong>1</strong>,<strong>2</strong>,<strong>3</strong>,4]</code> 。</p><p>以数组形式返回能使 <code>arr</code> 有序的煎饼翻转操作所对应的 <code>k</code> 值序列。任何将数组排序且翻转次数在 <code>10 * arr.length</code> 范围内的有效答案都将被判断为正确。<br><br></p><p><strong>示例 1：</strong></p><pre><b>输入：</b>[3,2,4,1]<b>输出：</b>[4,2,4,3]<b>解释：</b>我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。初始状态 arr = [3, 2, 4, 1]第一次翻转后（k = 4）：arr = [<b>1, 4, 2, 3</b>]第二次翻转后（k = 2）：arr = [<b>4, 1, </b>2, 3]第三次翻转后（k = 4）：arr = [<b>3, 2, 1, 4</b>]第四次翻转后（k = 3）：arr = [<b>1, 2, 3, </b>4]，此时已完成排序。 </pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>[1,2,3]<b>输出：</b>[]<b>解释：</b>输入已经排序，因此不需要翻转任何内容。请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。</pre><br><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 100</code></li><li><code>1 &lt;= arr[i] &lt;= arr.length</code></li><li><code>arr</code> 中的所有整数互不相同（即，<code>arr</code> 是从 <code>1</code> 到 <code>arr.length</code> 整数的一个排列）</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">pancakeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">move</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token function">move</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                    len<span class="token operator">--</span><span class="token punctuation">;</span>                    i <span class="token operator">=</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">^=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">knightProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> trueNum <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> row<span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> allNum <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trueNum <span class="token operator">/</span> allNum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> column<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">>=</span> n <span class="token operator">||</span> column <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> column <span class="token operator">>=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> column <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> column <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">,</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> column <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> column <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="688-骑士在棋盘上的概率-中等"><a href="#688-骑士在棋盘上的概率-中等" class="headerlink" title="688. 骑士在棋盘上的概率-中等"></a>688. 骑士在棋盘上的概率-<font color=#FFA119>中等</font></h2><p>在一个 <code>n x n</code> 的国际象棋棋盘上，一个骑士从单元格 <code>(row, column)</code> 开始，并尝试进行 <code>k</code> 次移动。行和列是 <strong>从 0 开始</strong> 的，所以左上单元格是 <code>(0,0)</code> ，右下单元格是 <code>(n - 1, n - 1)</code> 。  </p><p>象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，e然后在正交方向上是一个单元格。  </p><p><img src="/../resources/img/688.%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87-1.png"></p><p>每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。  </p><p>骑士继续移动，直到它走了 <code>k</code> 步或离开了棋盘。  </p><p>返回 <em>骑士在棋盘停止移动后仍留在棋盘上的概率</em> 。  <br></p><br><p><strong>示例 1：</strong></p><pre><b>输入:</b> n = 3, k = 2, row = 0, column = 0  <b>输出:</b> 0.0625  <b>解释:</b> 有两步(到(1,2)，(2,1))可以让骑士留在棋盘上。  在每一个位置上，也有两种移动可以让骑士留在棋盘上。  骑士留在棋盘上的总概率是0.0625。  </pre><br><p><strong>示例 2：</strong></p><pre><b>输入:</b> n = 1, k = 0, row = 0, column = 0<b>输出:</b> 1.00000</pre><br><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 25</code></li><li><code>0 &lt;= k &lt;= 100</code></li><li><code>0 &lt;= row, column &lt;= n</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOneBitCharacter</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bits<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">=</span> bits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> bits<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="704-二分查找-简单"><a href="#704-二分查找-简单" class="headerlink" title="704.二分查找-简单"></a>704.二分查找-<font color=#5AB726>简单</font></h2><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b> nums = [-1,0,3,5,9,12], target = 9<b>输出：</b> 4<b>解释：</b> 9 出现在 nums 中并且下标为 4</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b> nums = [-1,0,3,5,9,12], target = 2<b>输出：</b> -1<b>解释：</b> 2 不存在 nums 中因此返回 -1</pre><br><p><strong>提示：</strong></p><ul><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="717-1比特与2比特字符-简单"><a href="#717-1比特与2比特字符-简单" class="headerlink" title="717.1比特与2比特字符-简单"></a>717.1比特与2比特字符-<font color=#5AB726>简单</font></h2><p>有两种特殊字符：<br></p><ul><li><p>第一种字符可以用一比特 <code>0</code> 表示</p></li><li><p>第二种字符可以用两比特（<code>10</code> 或 <code>11</code>）表示</p></li></ul><p>给你一个以 <code>0</code> 结尾的二进制数组 <code>bits</code> ，如果最后一个字符必须是一个一比特字符，则返回 <code>true</code> 。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>bits = [1, 0, 0]<b>输出：</b>true<b>解释：</b>唯一的解码方式是将其解析为一个两比特字符和一个一比特字符。所以最后一个字符是一比特字符。 </pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>bits = [1,1,1,0]<b>输出：</b>false<b>解释：</b>唯一的解码方式是将其解析为两比特字符和两比特字符。所以最后一个字符不是一比特字符。</pre><br><p><strong>提示：</strong></p><ul><li><code>1 &lt;= bits.length &lt;= 1000</code></li><li><code>bits[i]</code> 为 <code>0</code> 或 <code>1</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="429-N-叉树的层序遍历-中等"><a href="#429-N-叉树的层序遍历-中等" class="headerlink" title="429. N 叉树的层序遍历-中等"></a><a href="https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/">429. N 叉树的层序遍历</a>-<font color=#FFA119>中等</font></h2><p>给定一个 N 叉树，返回其节点值的层序遍历。（即从左到右，逐层遍历）。</p><p>树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。 <br></p><br><p><strong>示例 1：</strong></p><p><img src="/../resources/img/429.N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86-1.png"></p><pre><b>输入：</b>root = [1,null,3,2,4,null,5,6]<b>输出：</b>[[1],[3,2,4],[5,6]]</pre><br><p><strong>示例 2：</strong></p><p><img src="/../resources/img/429.N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86-2.png"></p><pre><b>输入:</b> root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]<b>输出:</b> [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]</pre><br><p><strong>提示：</strong></p><ul><li>树的高度不会超过 <code>1000</code></li><li>树的节点总数在 <code>[0, 10<sup>4</sup>]</code> 之间</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public class Solution &#123;    private readonly IList&lt;IList&lt;int&gt;&gt; _ans &#x3D; new List&lt;IList&lt;int&gt;&gt;();    public IList&lt;IList&lt;int&gt;&gt; LevelOrder(Node root)    &#123;        Bfs(root,0);        return _ans;    &#125;    private void Bfs(Node root,int depth)    &#123;        if (root &#x3D;&#x3D; null)        &#123;            return;        &#125;        &#x2F;&#x2F; 深度超过长度就延长一个        if (_ans.Count &lt;&#x3D; depth)        &#123;            _ans.Add(new List&lt;int&gt;());        &#125;                _ans[depth].Add(root.val);        if (root.children &#x3D;&#x3D; null)        &#123;            return;        &#125;        foreach (var child in root.children)        &#123;            Bfs(child,depth+1);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>start<span class="token punctuation">,</span> end <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> start <span class="token operator">&lt;</span> end <span class="token punctuation">&#123;</span>mid <span class="token operator">:=</span> <span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token operator">^</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>end <span class="token operator">=</span> mid<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      end <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="540-有序数组中的单一元素-中等"><a href="#540-有序数组中的单一元素-中等" class="headerlink" title="540.有序数组中的单一元素-中等"></a>540.有序数组中的单一元素-<font color=#FFA119>中等</font></h2><p>给你一个仅由整数组成的有序数组，其中每个元素都会出现两次，唯有一个数只会出现一次。</p><p>请你找出并返回只出现一次的那个数。</p><p>你设计的解决方案必须满足 <code>O(log n)</code> 时间复杂度和 <code>O(1)</code> 空间复杂度。<br><br></p><p><strong>示例 1：</strong></p><pre><b>输入：</b> nums = [1,1,2,3,3,4,4,8,8]<b>输出：</b> 2</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b> nums =  [3,3,7,7,10,11,11]<b>输出：</b> 10</pre><br><p><strong>提示：</strong></p><ul><li><code>1 <= nums.length <= 10<sup>5</sup></code></li><li><code>0 <= nums[i] <= 10<sup>5</sup></code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="589-N叉树的前序遍历-简单"><a href="#589-N叉树的前序遍历-简单" class="headerlink" title="589.N叉树的前序遍历-简单"></a>589.N叉树的前序遍历-<font color=#5AB726>简单</font></h2><p>给定一个 n 叉树的根节点  <code>root</code> ，返回 <em>其节点值的 <strong>前序遍历</strong></em> 。</p><p>n 叉树 在输入中按层序遍历进行序列化表示，每组子节点由空值 <code>null</code> 分隔（请参见示例）。</p><br><p><strong>示例 1：</strong></p><p><img src="/../resources/img/589.N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86-1.png"></p><pre><b>输入：</b>root = [1,null,3,2,4,null,5,6]<b>输出：</b>[1,3,5,6,2,4]</pre><br><p><strong>示例 2：</strong></p><p><img src="/../resources/img/589.N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86-2.png"></p><pre><b>输入：</b>root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]<b>输出：</b>[1,2,3,6,7,11,14,4,8,12,5,9,13,10]</pre><br><p><strong>提示：</strong></p><ul><li>节点总数在范围 <code>[0, 10<sup>4</sup>]</code>内</li><li><code>0 <= Node.val <= 10<sup>4</sup></code></li><li>n 叉树的高度小于或等于 <code>1000</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">preorder</span><span class="token punctuation">(</span>root <span class="token operator">*</span>Node<span class="token punctuation">)</span> <span class="token punctuation">(</span>ans <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ans<span class="token punctuation">)</span><span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">dfs</span><span class="token punctuation">(</span>node <span class="token operator">*</span>Node<span class="token punctuation">,</span> res <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> node <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token operator">*</span>res <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">,</span> node<span class="token punctuation">.</span>Val<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> child <span class="token operator">:=</span> <span class="token keyword">range</span> node<span class="token punctuation">.</span>Children <span class="token punctuation">&#123;</span><span class="token function">dfs</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="7-整数反转-中等"><a href="#7-整数反转-中等" class="headerlink" title="7. 整数反转-中等"></a><a href="https://leetcode-cn.com/problems/reverse-integer/">7. 整数反转</a>-<font color=#FFA119>中等</font></h2><p>给你一个 32 位的有符号整数 <code>x</code> ，返回将 <code>x</code> 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 <code>[−2<sup>31</sup>,  2<sup>31</sup> − 1]</code> ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong><br></p><p><strong>示例 1：</strong></p><pre><b>输入：</b> x = 123<b>输出：</b> 321</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b> x = -123<b>输出：</b> -123</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b> x = 120<b>输出：</b> 21</pre><br><p><strong>示例 4：</strong></p><pre><b>输入：</b> x = 0<b>输出：</b> 0</pre><br><p><strong>提示：</strong></p><ul><li><code>-2<sup>31</sup> <= x <= 2<sup>31</sup>-1</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">/</span><span class="token number">10</span> <span class="token operator">!=</span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            temp <span class="token operator">=</span> temp <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="35-搜索插入位置-简单"><a href="#35-搜索插入位置-简单" class="headerlink" title="35.搜索插入位置-简单"></a>35.搜索插入位置-<font color=#5AB726>简单</font></h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>nums = [1,3,5,6], target = 5<b>输出：</b>2</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>nums = [1,3,5,6], target = 2<b>输出：</b>1</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>nums = [1,3,5,6], target = 7<b>输出：</b>4</pre><br><p><strong>示例 4：</strong></p><pre><b>输入：</b>nums = [1,3,5,6], target = 0<b>输出：</b>0</pre><br><p><strong>示例 5：</strong></p><pre><b>输入：</b>nums = [1], target = 0<b>输出：</b>0</pre><br><p><strong>提示：</strong></p><ul><li><code>1 <= nums.length <= 10<sup>4</sup></code></li><li><code>-10<sup>4</sup> <= nums[i] <= 10<sup>4</sup></code></li><li><code>nums</code> 为<strong>无重复元素</strong>的<strong>升序</strong>排列数组</li><li><code>-10<sup>4</sup> <= target <= 10<sup>4</sup></code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>end <span class="token operator">>=</span>start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> start<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token keyword">extends</span> <span class="token class-name">VersionControl</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>end <span class="token operator">>=</span> start<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> start<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                end <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                start <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> start<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="278-第一个错误的版本-简单"><a href="#278-第一个错误的版本-简单" class="headerlink" title="278.第一个错误的版本-简单"></a>278.第一个错误的版本-<font color=#5AB726>简单</font></h2><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 <code>bool isBadVersion(version)</code> 接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>n = 5, bad = 4<b>输出：</b>4<b>解释：</b>调用 isBadVersion(3) -> false 调用 isBadVersion(5) -> true 调用 isBadVersion(4) -> true所以，4 是第一个错误的版本。</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>n = 1, bad = 1<b>输出：</b>1</pre><br><p><strong>提示：</strong></p><ul><li><code>1 <= bad <= n <= 2<sup>31</sup> - 1</code></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> tempList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 保存头地址返回值</span>    <span class="token class-name">ListNode</span> first <span class="token operator">=</span> tempList<span class="token punctuation">;</span>    <span class="token comment">// 记录进位是多少</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果l1 l2 有元素 则将值累加到carry中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        carry <span class="token operator">+=</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        carry <span class="token operator">+=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">// 如果carry大于等于10说明要进位，将余数赋值给val [两数相加如果进位 进位数只能是1]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tempList<span class="token punctuation">.</span>val <span class="token operator">=</span> carry <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        tempList<span class="token punctuation">.</span>val <span class="token operator">=</span> carry<span class="token punctuation">;</span>        carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tempList<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempList <span class="token operator">=</span> tempList<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      tempList<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      tempList <span class="token operator">=</span> tempList<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      tempList<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> first<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 记录字符上一次出现的位置</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> last <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            last<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 窗口开始位置</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            start <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> last<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res   <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            last<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="2-两数相加-中等"><a href="#2-两数相加-中等" class="headerlink" title="2.两数相加-中等"></a>2.两数相加-<font color=#FFA119>中等</font></h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。  <br></p><br><p><strong>示例 1：</strong></p><p><img src="/../resources/img/2.%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-1.jpeg"></p><pre><b>输入：</b>l1 = [2,4,3], l2 = [5,6,4]<b>输出：</b>[7,0,8]<b>解释：</b>342 + 465 = 807</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>l1 = [0], l2 = [0]<b>输出：</b>[0]</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<b>输出：</b>[8,9,9,9,0,0,0,1]</pre><br><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围 <code>[1, 100]</code> 内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/04/12/undefined/"/>
      <url>/2022/04/12/undefined/</url>
      
        <content type="html"><![CDATA[<h2 id="3-无重复字符的最长子串-中等"><a href="#3-无重复字符的最长子串-中等" class="headerlink" title="3. 无重复字符的最长子串-中等"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">3. 无重复字符的最长子串</a>-<font color=#FFA119>中等</font></h2><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。  <br></p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b>s = "abcabcbb"<b>输出：</b>3 <b>解释：</b>因为无重复字符的最长子串是 "abc"，所以其长度为 3。</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>s = "bbbbb"<b>输出：</b>1<b>解释：</b>因为无重复字符的最长子串是 "b"，所以其长度为 1。</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>s = "pwwkew"<b>输出：</b>3<b>解释：</b>因为无重复字符的最长子串是 "wke"，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。</pre><br><p><strong>提示：</strong></p><ul><li><code>0 <= s.length <= 5 * 10<sup>4</sup></code></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.两数之和</title>
      <link href="/2022/04/12/two-sum/"/>
      <url>/2022/04/12/two-sum/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两数之和-简单"><a href="#1-两数之和-简单" class="headerlink" title="1. 两数之和-简单"></a><a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和</a>-<font color=#5AB726>简单</font></h2><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <em><code>target</code></em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><br><p><strong>示例 1：</strong></p><pre><b>输入：</b> nums = [2,7,11,15], target = 9  <b>输出：</b> [0,1]<b>解释：</b> 因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</pre><br><p><strong>示例 2：</strong></p><pre><b>输入：</b>nums = [3,2,4], target = 6<b>输出：</b>[1,2]</pre><br><p><strong>示例 3：</strong></p><pre><b>输入：</b>nums = [3,3], target = 6<b>输出：</b>[0,1]</pre><br><p><strong>提示：</strong></p><ul><li><code>2 <= nums.length <= 10<sup>4</sup></code></li><li><code>-10<sup>9</sup> <= nums[i] <= 10<sup>9</sup></code></li><li><code>-10<sup>9</sup> <= target <= 10<sup>9</sup></code></li><li><strong>只会存在一个有效答案</strong></li></ul><p><strong>进阶：</strong> 你可以想出一个时间复杂度小于 <code>O(n<sup>2</sup>)</code> 的算法吗？</p><p><strong>最终代码：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 循环数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 查询与nums[i]相加等于target的数存在数组中么</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">getArrayOfIndex</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// temp大于0说明找到了 返回当前下标和对应数字的下标</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> temp<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 找出起始index之后有没有数字a  并返回下标     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getArrayOfIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 循环数组后半段即可，前半段都循环过不需要再循环</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 找到就返回下标</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
